1. SPERO의 구조
SPERO는 IaaS, PaaS, Service를 통합하여 관리하고, SPERO사용자는 시간이나 장소에 제한을 받지 않고, 언제 어디서나 사용할 수 있으며, SSO를 통해 권한이 부여된 SPERO사용자의 권한을 다른 Application에서 동시에 사용할 수 있다. 또한, 정책 기반의 자동 확장성을 통해 약속된 성능이 보장된다.
SPERO에 탑재되는 모든 서비스의 운영, 유지 보수 및 가용성 관리는 SPERO에서 지원한다. SPERO는 자동화된 확인 작업을 통해 배포 후, 새 구성 요소와 기능을 사용할 수 있다. 즉, SPERO운영자는 항상 최신 SPERO응용 Program을 사용할 수 있으며, SPERO의 새로운 서비스는 Cluster 또는 Tenant 단위로 관리된다.
SPERO는 고객이 Single Package로 요구하는 다양한 솔루션과 정책을 제공하는 Unified UI/UX Solution이다. SPERO는 전문 그래픽 디자이너가 설계한 UI/UX를 제공하여 보다 편안하고, 작동하기 쉬운 화면을 제공하며, 하나의 UI/UX를 통해 다양한 Cloud Service를 통합하여 관리함으로써 운영의 편리성, 직관적인 UI/UX 및 서비스 기반 운영을 제공한다.
SPERO는 통합 UI/UX를 제공하는 것 외에도 고객이 원하는 메뉴를 수행할 수 있는 Workflow 기반 운영 서비스를 제공함으로써 복잡한 작업을 단계별로 연결하는 One-stop Service를 제공하여 작업을 쉽게 수행할 수 있도록 지원한다.
SPERO는 작업하는 동안 수행된 작업 내역을 기록하고, 관리하며, 작업이 완료 또는 종료되지 않은 경우, 작업자가 일정 시간이 지난 후, 다음 작업을 계속 수행할 수 있는 기능과 작업 흐름을 이어서 수행하는 환경을 제공한다. SPERO는 작업의 진행 상황과 완료를 통해 진행 상황을 관리하므로 현재 작업의 진행 상황과 완료 상태를 시각적으로 확인할 수 있다.
SPERO는 IaaS, PaaS 및 Application Service를 통합하여 서비스를 관리하고, 감시하며, 조회하는 통합 관리 기능을 제공하여 Cloud 사용자에게 안전하고 편리한 Infrastructure, Platform 및 Application 관리기능을 제공한다.

1.1 특징
SPERO구성의 특징은 다음과 같다.
(1)	Frontend(FE)와 Backend(BE)로 구성한다.
(2)	Frontend와 Backend 구간의 모든 통신은 AGF(API gateway Framework)를 경유해야만 사용할 수 있다.
(3)	API Gateway 하위의 API 호출에는 내부 URL로 변환하여 전달한다.
(4)	SPERO는 다른 Cloud Services를 쉽게 수용 또는 운용할 수 있도록 Plug-in하여 구성할 수 있으며, 다양한 API를 추가하여 연동할 수 있다.
(5)	SPERO는 한 번의 로그인으로 API Gateway 하위의 모든 Solutions (or Tools)과 통신이 가능하다.

1.2 Frontend(FE)
SPERO의 Frontend는 ‘Vue.js3’을 이용하여 화면 페이지를 구현하였으며, 이 화면 페이지는 Frontend만을 위한 Web Server(Backend for Frontend, 이하 ‘BFF’로 부른다.)를 제공한다. BFF는 “Spring Boot”로 구현되어 있다.
BFF와 SPERO Server 간에는 REST API로 통신한다. 모든 메시지는 Server의 API gateway인 “Kong”으로 전달된다. 이때, JWT token을 이용하여 인증 여부를 확인한다.
Tree Model 및 Event Polling 결과는 SPERO서버에 일정 주기마다 REST API를 호출하여 데이터를 수집한다. Tree 형상 변경 시, 실시간 반영이 아닌 Tree Viewer 동기화 기능을 이용하거나 다음 Polling time에 가져온 정보를 기반으로 동기화가 실행된다.

1.3 Backend (BE)
SPERO Backend(BE) 서비스는 SPERO MNO (Management and Orchestration)을 위한 서비스 모듈을 제공한다. 
SPERO의 BE를 지원하기 위해 사용하는 도구는 AGF(API gateway Framework), AMF(Authentication Management Framework), 
CMF(Configuration Management Framework), UMF(User Management Framework), LMF(Log Management Framework), 
AIF(Active Inventory Framework), SO(Service/App Orchestrator), MVC(Multi-VIM/Cloud), ACF(Application Controller Framework), DCM(Data Collector & Mediator) 등이 있다.

(1)	AGF (API gateway Framework)
    (A)	SPERO에서 제공되는 모든 서비스는 REST API로 통신하며, 서비스를 사용하기 위해서 SPERO에 로그인을 해야 하고, 인증과 인가를 취득해야 사용할 수 있다.
    (B)	Frontend에서 요청하는 모든 메시지는 AMF(API Gateway)를 통해서 이용된다.
    (C)	Kong 오픈소스를 기반으로 구성되었다.

(2)	AMF( Authentication Management Framework)
    (A)	Keycloak과 연동하여 사용자 인증 서비스를 제공한다.
    (B)	인증 방식은 OIDC를 사용한다.

(3)	CMF (Configuration Management Framework)
    (A)	IaaS/PaaS에서 주기적으로 형상 정보를 수집(Polling)하여 형상 테이블에 저장한다.
    (B)	저장된 형상 테이블은 Tree 형태로 볼 수 있도록 재구성한다.
    (C)	이벤트 정보는 SPERO Server/IaaS/PaaS에서 주기적으로 수집하여 장애 테이블에 저장한다.

(4)	UMF (User Management Framework)
    (A)	SPERO에서 제공하는 인증 서비스를 제외한 대부분의 서비스는 UMF (User Management Framework)에서 제공한다.
    (B)	인증 서비스를 사용하기 위해서는 SPERO계정으로 로그인을 해야 한다.
    (C)	SPERO에서 조회하고 저장하는 데이터는 MariaDB에 저장된다.
    (D)	이벤트 관리 등을 수행한다.

(5)	LMF (Log Management Framework)
    (A)	로그 데이터를 수집할 수 있는 기능을 제공한다.
    (B)	수집한 로그 데이터는 DB에 저장된다.
    (C)	수집하고 있는 로그 데이터는 API Gateway에서 수행한 명령어 이력 데이터와 시스템 운용 이력 데이터이다.

(6)	AIF (Active Inventory Framework)
    (A)	형상 정보, 장애 정보, 로그 정보는 모두 MariaDB의 DBMS에 저장한다.
    (B)	빠른 조회를 위하여 Redis DB와 연동하여 사용한다.

(7)	SO (Service/App Orchestrator)
    (A)	LCM을 workflow 기반으로 관리하며, 오케스트레이션 관련 내부 서브 시스템 (e.g., ACF, MVC) 등과 연동한다.
    (B)	서비스 생성/삭제/중단/재개 등의 동작을 수행한다.
    (C)	Airflow 오픈소스 기반으로 구성되어 있다.

(8)	MVC (Multi-VIM/Cloud)
    (A)	Infrastructure Adaptation 기능을 담당한다.
    (B)	infrastructure (private cloud 또는 public cloud)와 연동하는 interface를 관리하는 기능을 제공한다.
    (C)	Terraform 어플리케이션 기반으로 구성되어 있다.

(9)	ACF (Application Controller Framework)
    (A)	application의 설치/삭제/시작/중단 및 configuration 갱신 등의 기능을 담당한다.
    (B)	모니터링 agent의 설치 및 수집 정보 변경 기능도 담당한다.
    (C)	API 기반의 온프레미스 모니터링 기능을 제공한다.
    (D)	Ansible 오픈소스 기반으로 구성되어 있다.

(10) DCM (Data Collector & Mediator)
    (A)	SPERO에서 agent로부터 수집되는 메트릭을 저장 관리한다.
    (B)	TSDB인 influxDB기반으로 구성되어 있다.
